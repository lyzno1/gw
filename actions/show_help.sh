#!/bin/bash
# 脚本/actions/show_help.sh
#
# 实现 'help' 命令逻辑。
# 依赖:
# - colors.sh (颜色定义)
# - config_vars.sh (配置变量, 用于显示 MAIN_BRANCH, REMOTE_NAME 等默认值)

# 显示帮助信息
show_help() {
    echo -e "${BOLD}Git 工作流助手 (gw) 使用说明${NC}"
    echo "用法: gw <命令> [参数...]"
    echo ""
    echo -e "${CYAN}🚀 仓库初始化与配置 🚀${NC}"
    echo "  init [...]              - 初始化当前目录为 Git 仓库 (可附加 git init 参数)。"
    echo "  config <user> <email>   - 快速设置本地仓库的 user.name 和 user.email。"
    echo "  config [...]            - 执行原生 git config 命令 (例如: gw config --global user.name ...)。"
    echo "  remote [...]            - 管理远程仓库 (原生 git remote 包装器, 例如: gw remote add origin <url>)。"
    echo "  gh-create [repo] [--public|--private] [-d \"desc\"] [-r <remote>] [--no-push]"
    echo "                            - 在 GitHub 创建仓库并关联。详情如下:"
    echo "                              [repo]: GitHub 仓库名 (默认当前目录名)。"
    echo "                              --public: 公开仓库 (默认: 私有)。"
    echo "                              -d \"desc\": 仓库描述。"
    echo "                              -r <remote>: 本地远程名称 (默认: ${REMOTE_NAME})。"
    echo "                              --no-push: 创建后不执行初始推送 (默认: 推送当前分支)。"
    echo ""
    echo -e "${CYAN}⭐ 核心工作流命令 ⭐${NC}"
    printf "${YELLOW}  gw new <branch_name> [--local] [--base <base_branch>]${NC} (默认基础分支: ${MAIN_BRANCH})\n"
    printf "    从基础分支创建并切换到一个新的开发分支。\n"
    printf "    ${CYAN}--local${NC}            - 基于本地的基础分支状态创建，跳过自动拉取最新代码。\n"
    printf "    ${CYAN}--base <branch>${NC}   - 指定用于创建新分支的基础分支。\n"
    echo "  save [-m \"消息\"] [-e] [文件...] - 快速保存变更: 添加指定文件 (默认全部) 并提交。"
    echo "                            (无 -m/-e 或消息，则进入交互式编辑提交信息模式；-e 强制使用 \$EDITOR。)"
    echo "  sync                    - 同步开发分支: 拉取主分支 ('$MAIN_BRANCH') 最新代码并 rebase 当前分支。"
    echo "  finish [-n|--no-switch] [-p|--pr] - 完成当前分支开发: 检查/提交变更, 推送, 可选创建 PR。"
    echo "                            (-n 不切换回主分支, -p/-pr 尝试使用 'gh' 创建 GitHub PR)。"
    echo "  clean <分支名>          - 清理已合并分支: 切换到主分支, 更新, 然后删除指定分支 (本地和远程)。"
    echo "  main | master [...]     - 推送主分支 ('$MAIN_BRANCH') 到远程 ('$REMOTE_NAME') (可附加 git push 参数如 -f)。"
    echo ""
    echo -e "${CYAN}常用 Git 操作包装:${NC}"
    echo "  status [-r] [-l]        - 显示工作区状态 (默认纯本地; -r 获取远程; -l 显示简短日志)。"
    echo "  add [文件...]           - 添加文件到暂存区 (无参数则交互式选择)。"
    echo "  add-all                 - 添加所有变更到暂存区 (git add -A)。"
    echo "  commit [-m \"消息\"] [-F 文件] [--no-verify] [...] - 提交暂存。"
    echo "                            (无 -m/-F 则进入交互式编辑提交信息模式；可附加 git commit 参数)。"
    echo "  pull [远程] [分支] [...] - 拉取并合并远程更新 (带重试, 支持原生 git pull 参数)。"
    echo "  push [远程] [分支] [...] - 推送本地提交到远程 (带重试, 自动处理 -u, 支持原生 git push 参数)。"
    echo "  fetch [远程] [...]      - 从远程获取最新信息，但不合并 (支持原生 git fetch 参数)。"
    echo ""
    echo -e "${CYAN}其他分支操作:${NC}"
    echo "  branch                  - 列出本地分支 (原生 git branch)。"
    echo "  branch -a               - 列出所有分支 (本地和远程跟踪)。"
    echo "  checkout <分支名>       - 切换到已存在的分支 (会检查未提交变更)。"
    echo "  merge <来源分支> [...]  - 合并指定分支到当前分支 (支持原生 git merge 参数)。"
    echo "  rm <分支名|all> [-f]    - 删除指定本地分支 (可选删远程, -f 强制)。'all' 清理所有非主分支。"
    echo ""
    echo -e "${CYAN}历史与差异:${NC}"
    echo "  log [...]               - 显示提交历史 (支持原生 git log 参数, 带分页)。"
    echo "  diff [...]              - 显示变更差异 (支持原生 git diff 参数, 如 --cached)。"
    echo -e "  reset <目标> [...]      - ${RED}危险:${NC} 将当前 HEAD 重置到指定状态 (commit, HEAD~N)。"
    echo -e "                            (谨慎使用! 支持部分 git reset 参数, 如 --hard 会有额外确认)。"
    echo ""
    echo -e "${CYAN}兼容旧版 (gp) 推送命令别名:${NC}"
    echo "  1 | first <分支名> [...] - 首次推送指定分支 (带 -u) 到 '$REMOTE_NAME'。"
    echo "  2 [...]                 - 推送主分支 ('$MAIN_BRANCH') 到 '$REMOTE_NAME' (同 gw main)。"
    echo "  3 | other <分支名> [...] - 推送已存在的指定分支到 '$REMOTE_NAME' (不带 -u)。"
    echo "  4 | current [...]       - 推送当前所在分支到 '$REMOTE_NAME' (自动处理 -u)。"
    echo ""
    echo -e "${CYAN}其他:${NC}"
    echo "  help, --help, -h        - 显示此帮助信息。"
    echo ""
    echo -e "${YELLOW}环境变量 (部分):${NC}"
    echo "  MAIN_BRANCH (当前: $MAIN_BRANCH) - 定义主分支名。"
    echo "  REMOTE_NAME (当前: $REMOTE_NAME) - 定义默认远程仓库名。"
    echo "  MAX_ATTEMPTS (当前: $MAX_ATTEMPTS), DELAY_SECONDS (当前: $DELAY_SECONDS) - 控制推送/拉取重试。"
    echo ""
    echo -e "${YELLOW}提示:${NC} 大部分命令在 Git 命令基础上增加了交互和工作流优化。"
    echo -e "对于多数Git原生命令的包装器，你仍然可以使用它们支持的Git参数。"
} 